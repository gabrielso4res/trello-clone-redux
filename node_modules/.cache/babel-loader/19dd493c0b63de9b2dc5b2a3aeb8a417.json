{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listID = 2;\nlet cardID = 5;\nconst initialState = [{\n  title: \"Para fazer\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"Trello Clone\"\n  }, {\n    id: `card-${1}`,\n    text: \"Estilo\"\n  }]\n}, {\n  title: \"Fazendo\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"Refatorando\"\n  }, {\n    id: `card-${3}`,\n    text: \"Commit\"\n  }, {\n    id: `card-${4}`,\n    text: \"Teste\"\n  }]\n}];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      {\n        const newCard = {\n          text: action.payload.text,\n          id: `card-${cardID}`\n        };\n        cardID += 1;\n        const newState = state.map(list => {\n          if (list.id === action.payload.listID) {\n            return { ...list,\n              cards: [...list.cards, newCard]\n            };\n          } else {\n            return list;\n          }\n        });\n        return newState;\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const newState = [...state];\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        type\n      } = action.payload;\n\n      if (type === \"list\") {\n        const list = newState.splice(droppableIdStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...list);\n        return newState;\n      }\n\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["/home/gabriel/Documentos/EstÃ¡gio/Training/Trello Clone/src/reducers/listsReducer.js"],"names":["CONSTANTS","listID","cardID","initialState","title","id","cards","text","listsReducer","state","action","type","ADD_LIST","newList","payload","ADD_CARD","newCard","newState","map","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","splice","find","card","listStart","listEnd"],"mappings":"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","sourcesContent":["import { CONSTANTS } from \"../actions\";\nlet listID = 2;\nlet cardID = 5;\n\nconst initialState = [\n  {\n    title: \"Para fazer\",\n    id: `list-${0}`,\n    cards: [\n      {\n        id: `card-${0}`,\n        text: \"Trello Clone\",\n      },\n      {\n        id: `card-${1}`,\n        text: \"Estilo\",\n      },\n    ],\n  },\n  {\n    title: \"Fazendo\",\n    id: `list-${1}`,\n    cards: [\n      {\n        id: `card-${2}`,\n        text: \"Refatorando\",\n      },\n      {\n        id: `card-${3}`,\n        text: \"Commit\",\n      },\n      {\n        id: `card-${4}`,\n        text: \"Teste\",\n      },\n    ],\n  },\n];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`,\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD: {\n      const newCard = {\n        text: action.payload.text,\n        id: `card-${cardID}`,\n      };\n      cardID += 1;\n\n      const newState = state.map((list) => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard],\n          };\n        } else {\n          return list;\n        }\n      });\n\n      return newState;\n    }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const newState = [...state];\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        type,\n      } = action.payload;\n\n      if (type === \"list\") {\n        const list = newState.splice(droppableIdStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...list);\n        return newState;\n      }\n\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find((list) => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find((list) => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find((list) => droppableIdEnd === list.id);\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;\n"]},"metadata":{},"sourceType":"module"}